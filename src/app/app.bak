"""Litestar template application.

.. todo:: Refactor routes into separate file
"""

from advanced_alchemy import RepositoryError
from dotenv import load_dotenv
from litestar import  Litestar
from litestar.config.cors import CORSConfig
from litestar.types import ControllerRouterHandler

from app.config import openapi, static_files, template
from app.domain import books
from app.lib import db,exceptions,log
from app.lib import repository
from app.domain.books.controllers.book import BookController

# __all__ = (
#     "home",
# )

# from app.lib.db.base import  init_db

load_dotenv()


# @get(path="/", operation_id="home", tags=["frontend:home"], status_code=200, include_in_schema=False)
# async def home(request: Request) -> Template:
#     """Index page.
#
#     Args:
#         request: Request object
#
#     Returns:
#         Tuple: Response and status code
#     """
#     request.logger.info("Index page requested.")
#     context = {
#         "request": request,
#         "repo_url": "https://github.com/JacobCoffee/litestar-template",
#         "railway_ref_url": "https://railway.app/template/zx1KGh?referralCode=BMcs0x",
#     }
#     return Template("index.html", context=context)
#
#
# class ConcurrencyModelExamplesController(Controller):
#     """Controller showcasing concurrency models."""
#
#     tags = ["concurrency"]
#
#     @get("/async", operation_id="async", tags=["concurrency:async"], include_in_schema=True)
#     async def async_hello_world(self) -> dict[str, Any]:
#         """Route Handler for asynchronous endpoint.
#
#         Returns:
#             dict[str, Any]: Response
#         """
#         await sleep(0.1)
#         return {"endpoint": "asynchronous"}
#
#     @get("/sync", sync_to_thread=False, operation_id="sync", tags=["concurrency:sync"], include_in_schema=True)
#     def sync_hello_world(self) -> dict[str, Any]:
#         """Route Handler for synchronous endpoint.
#
#         Returns:
#             dict[str, Any]: Response
#         """
#         return {"endpoint": "synchronous"}
#
#
routes: list[ControllerRouterHandler] = [home, books.controllers.BookController]
"""List of routes."""
cors_config = CORSConfig(allow_origins=["*"])

app = Litestar(
    route_handlers=[*routes],
    # --- Config
    template_config=template.config,
    openapi_config=openapi.config,
    exception_handlers={
        exceptions.ApplicationError: exceptions.exception_to_http_response,
        RepositoryError: exceptions.exception_to_http_response,
    },
    before_send=[log.controller.BeforeSendHandler()],
    logging_config=log.config,
    # static_files_config=static_files.config,
    plugins=[db.plugin],
    # --- Lifecycle
    cors_config=cors_config,
    # on_startup=[],
    on_startup=[ lambda: log.configure(log.default_processors),db.init_db],
    on_app_init=[repository.on_app_init],
    # pdb_on_exception=True,
    debug=True,


)
